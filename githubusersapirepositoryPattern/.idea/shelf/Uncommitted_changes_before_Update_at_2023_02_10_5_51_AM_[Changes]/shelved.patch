Index: app/src/main/java/com/programmers/githubapiRepository/view/DetailActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.programmers.githubapiRepository.view\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.databinding.DataBindingUtil\nimport androidx.room.Room\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.programmers.githubapiRepository.R\nimport com.programmers.githubapiRepository.data.UsersData\nimport com.programmers.githubapiRepository.data.repository.local.MIGRATION_1_2\nimport com.programmers.githubapiRepository.data.repository.local.UserDatabase\nimport com.programmers.githubapiRepository.databinding.ActivityDetailBinding\nimport com.programmers.githubapiRepository.viewmodel.MainViewModel\nimport kotlinx.coroutines.runBlocking\n\nclass DetailActivity : AppCompatActivity() {\n\n    private lateinit var binding: ActivityDetailBinding\n    private val viewmodel: MainViewModel by viewModels()\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_detail)\n        val userDetail = intent.getStringExtra(\"user\")\n        val searchDetail = intent.getStringExtra(\"search\")\n        val urlDetail = intent.getStringExtra(\"url\")\n\n\n        val localUsersDB =\n            Room.databaseBuilder(applicationContext, UserDatabase::class.java, searchDetail)\n                .addMigrations(MIGRATION_1_2).build()\n        runBlocking {\n            if(localUsersDB.localUsersDataDao().getUser(userDetail!!).favorite){\n                binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite)\n            }else {\n                binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite_border)\n            }\n            userImg(urlDetail)\n            binding.userItemTvName.text = userDetail\n        }\n\n        binding.detailIvLikeBtn.setOnClickListener {\n            runBlocking {\n\n                localUsersDB.localUsersDataDao().updateUser(UsersData(\n                    localUsersDB.localUsersDataDao().getUser(userDetail!!).id,\n                    localUsersDB.localUsersDataDao().getUser(userDetail).login,\n                    localUsersDB.localUsersDataDao().getUser(userDetail).avatar_url,\n                    !localUsersDB.localUsersDataDao().getUser(userDetail).favorite))\n                val asdf = localUsersDB.localUsersDataDao().getUser(userDetail).favorite\n\n\n                if(asdf){\n                    binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite)\n                }else {\n                    binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite_border)\n                }\n                Log.d(\"ASDF\",\"ASDF\");\n\n            }\n        }\n    }\n\n\n     fun userImg(let: String?) {\n         Glide.with(this)\n             .load(let)\n             .apply(RequestOptions.centerCropTransform())\n             .into(binding.userItemImgPhoto)\n\n     }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/programmers/githubapiRepository/view/DetailActivity.kt b/app/src/main/java/com/programmers/githubapiRepository/view/DetailActivity.kt
--- a/app/src/main/java/com/programmers/githubapiRepository/view/DetailActivity.kt	
+++ b/app/src/main/java/com/programmers/githubapiRepository/view/DetailActivity.kt	
@@ -52,15 +52,13 @@
                     localUsersDB.localUsersDataDao().getUser(userDetail).login,
                     localUsersDB.localUsersDataDao().getUser(userDetail).avatar_url,
                     !localUsersDB.localUsersDataDao().getUser(userDetail).favorite))
-                val asdf = localUsersDB.localUsersDataDao().getUser(userDetail).favorite
 
-
-                if(asdf){
+                // view model 로 이동
+                if(localUsersDB.localUsersDataDao().getUser(userDetail).favorite){
                     binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite)
                 }else {
                     binding.detailIvLikeBtn.setImageResource(R.drawable.baseline_favorite_border)
                 }
-                Log.d("ASDF","ASDF");
 
             }
         }
Index: app/src/main/java/com/programmers/githubapiRepository/view/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.programmers.githubapiRepository.view\n\nimport android.content.Intent\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport androidx.activity.viewModels\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.databinding.DataBindingUtil\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.repeatOnLifecycle\nimport androidx.room.Room\nimport com.programmers.githubapiRepository.R\nimport com.programmers.githubapiRepository.data.UsersData\nimport com.programmers.githubapiRepository.data.repository.local.MIGRATION_1_2\nimport com.programmers.githubapiRepository.data.repository.local.UserDatabase\nimport com.programmers.githubapiRepository.databinding.ActivityMainBinding\nimport com.programmers.githubapiRepository.model.NetworkManage\nimport com.programmers.githubapiRepository.viewmodel.MainViewModel\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.collectLatest\n\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var binding: ActivityMainBinding\n    private val viewmodel: MainViewModel by viewModels()\n    private var bNetworkManage = false\n    val TAG by lazy { this.componentName.className }\n\n    @RequiresApi(Build.VERSION_CODES.M)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val currentTime : Long = System.currentTimeMillis()\n        bNetworkManage = NetworkManage().isOnline(this)\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)\n        binding.search = this\n        binding.rvMain.adapter = UsersAdapter(context = this)\n        runTime()\n        observeData()\n        (binding.rvMain.adapter as UsersAdapter).setItemClickListener(object: UsersAdapter.OnItemClickListener{\n            override fun onClick(v: View, position: Int) {\n                val intent = Intent(this@MainActivity,DetailActivity::class.java)\n                intent.putExtra(\"user\",viewmodel.userList.value[position].login)\n                intent.putExtra(\"url\",viewmodel.userList.value[position].avatar_url)\n                intent.putExtra(\"search\",binding.etMain.text.toString())\n                intent.putExtra(\"isMyFavorite\",viewmodel.userList.value[position].favorite)\n                intent.putExtra(\"pos\",position)\n                startActivity(intent)\n                finish()\n            }\n        })\n    }\n\n    fun searchEvent() {\n        // 네트워크 상태를 확인 하여 네트워크 통신중이 아니라면 로컬db에서 검색한다.\n        if(bNetworkManage) {\n           viewmodel.fetchUsers(binding.etMain.text.toString())\n        }else {\n            viewmodel.getLocal(binding.etMain.text.toString(),this)\n        }\n\n    }\n    private fun runTime() {\n        lifecycleScope.launch{\n            var runtimecount = 0\n        // Lifecycle.State.~~  : ~~ 단계 에서 항상 (재)실행 한다.\n            repeatOnLifecycle(Lifecycle.State.STARTED){\n                while (true) {\n                    Log.d(\"State.STARTED\", binding.tvTimer.text.toString())\n                    delay(1000)\n                    runtimecount += 1\n                    binding.tvTimer.text = \"Run Time : ${runtimecount}\"\n                }\n            }\n        }\n    }\n\n\n    private fun observeData() {\n        lifecycleScope.launch {\n            viewmodel.userList.collectLatest {\n                if (it.isNotEmpty()) {\n                    (binding.rvMain.adapter as UsersAdapter).update(it)\n                    if(bNetworkManage) saveLocal(it)\n                }\n            }\n        }\n        requestInvalidUsersEvent()\n\n    }\n\n    private fun saveLocal(usersData: MutableList<UsersData>) {\n\n        val localUsersDB = Room.databaseBuilder(\n            applicationContext,\n            UserDatabase::class.java, binding.etMain.text.toString()\n        ).addMigrations(MIGRATION_1_2).build()\n        for (i in 0 until  usersData.size-1) {\n            val login: String = usersData[i].login\n            val avatar_url: String = usersData[i].avatar_url\n\n\n            runBlocking {\n                localUsersDB.localUsersDataDao().insert(UsersData(i,login, avatar_url,usersData[i].favorite))\n            }\n        }\n    }\n    private fun requestInvalidUsersEvent() {\n        viewmodel.uiFlow.observe(this, Observer{\n                when (it) {\n                    MainViewModel.UiFlow.EmptyUserList -> {\n\n                        this@MainActivity.toast { \"No Users List\" }\n                        binding.rvMain.visibility = View.GONE\n                    }\n                    is MainViewModel.UiFlow.ErrorMessage -> {\n                        this@MainActivity.toast { it.throwable.message.toString() }\n                        binding.rvMain.visibility = View.GONE\n                    }\n                    MainViewModel.UiFlow.Init -> {}\n                }\n        })\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/programmers/githubapiRepository/view/MainActivity.kt b/app/src/main/java/com/programmers/githubapiRepository/view/MainActivity.kt
--- a/app/src/main/java/com/programmers/githubapiRepository/view/MainActivity.kt	
+++ b/app/src/main/java/com/programmers/githubapiRepository/view/MainActivity.kt	
@@ -48,7 +48,6 @@
                 intent.putExtra("user",viewmodel.userList.value[position].login)
                 intent.putExtra("url",viewmodel.userList.value[position].avatar_url)
                 intent.putExtra("search",binding.etMain.text.toString())
-                intent.putExtra("isMyFavorite",viewmodel.userList.value[position].favorite)
                 intent.putExtra("pos",position)
                 startActivity(intent)
                 finish()
