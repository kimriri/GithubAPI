- AAC

 : Android Architecture Components 의 약자

 - Architecture 직역하면 건축학 이지만 소프트웨어 용어에서는 호환성이라는 뜻

 - Components 는 구성품 혹은 구성요소라는 뜻

즉 Android Architecture Components 를 글자 그대로 해석해보면  안드로이드 호환성 구성품(구성요소) 정도이다.

AAC View Model은 MVVM의 VM(View Model)과는 다르다. (동음이어인셈)

MVVM에서의 ViewModel은 View 와 Model 사이에서 인터페이스 역할을 하는 클래스를 말한다.

즉 View viewModel에 이벤트를 요청하면 viewModel은 Model에게 이벤트가 발생했다는 것을 알리고 Model은 이벤트를 처리해 사용자에게 보여줄 값을 viewModel에게 넘겨준다.

그러면 View는 ViewModel이 가지고 값을 가지고와서 사용 한다. 

ACCMVVM에서 말하는 MVVM은 다음과 같다. 

Android는 액티비티를 통해 앱의 UI를 제어하는데 

onCreate ~ onDestroy 까지의 생명주기를 가지며 이 생명 주기마다 특정 이벤트를 발생 시킬수 잇다. 

이러한 특징 때문에 만약 단말기의 가로세로 전환, 또는 이전 Activity가 onDestroy 된후 다시 호출 했을때  onCreate부터 다시 시작 해야 하는데 이렇게 되면 각 Activity가 실행되고 종료될때마다 데이터를 계속해서 새로 갱신 시켜주어야 한다. 구글에서 제안한 ViewModel은 ViewModelScope를 활용하여 UI와  데이터를 분리하여 Activity의 생명주기에 관계없이  ViewModelScope가 onCleared()되기전까지 데이터를 계속 데이터가 저장된 메모리를 유지한다.

자세한 View Model 에서 말하는 View Mode은 아래 문서를 참조해보도록 하자. 

Android developers  

[ViewModel overview | Android Developers](https://developer.android.com/topic/libraries/architecture/viewmodel)

 

 - CoroutineScope 

:  CoroutineScope는 coroutine을 사용하기 위한 스코프 의 일종이다. 

 coroutine은 스코프안에서만 동작하는데 대표적으로  GlobalScope와 CoroutineScope 가있다.

GlobalScope는 앱의 생명주기와 함께 동작하는데, 앱 내의 특정 환경에서만 동작 되는 coroutine 보다는 앱의 실행부터 종료까지 전반적인 이벤트에 관여할때 쓰기에 적절하다.

CoroutineScope는 앱내 사용자 이벤트가 발생할때 사용하기에 적합하다. 

또한 앞서 ACCMVVM 모델에서 사용하는 ViewModelScope도 있는데  ViewModelScope는 ViewModel class 가 종료 될때 ( destroy ) 함께 종료 된다. 

- Dispatchers

:  CoroutineScope는 GlobalScope와는 다르게 Dispatchers로 실행쓰레드를 지정 할 수 있다. 이는   GlobalScope가 앱의 메인 쓰레드에서 동작하는 것과 달리 어느 쓰레드풀에서 실행할지를 정한다.

대표적으로

Main, IO, Default, Unconfined 가 있다.

나머지는 CoroutineDispatcher 인데 Main 만 MainCoroutineDispatcher로 되어 있다.

Main 은 말그대로 Main 스레드를 사용하는 dispatcher로 UI에 변경이 예상되는 이벤트에 적합하다.

IO는 말그대로 입/출력(다일다운로드, 업로드)등과 같이 외부로부터 들어오고 나가는 이벤트에 사용하기 적합하다.

Default는 가장 기본적인 형태의 dispatchers로 특별히 특회된 기능 없이 가장 기본적인 dispatchers

Unconfined는 특정 스레드에 국한되지 않고 어떤 스레드에서든 재 시작 할 수 있는 특징을 가진다.    

